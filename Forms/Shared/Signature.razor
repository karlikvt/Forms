@inject IJSRuntime JsRuntime

<div id="wrapper" style="border:solid">
    <div id="canvas">
        .
    </div>
</div>
<div class="col-xs-12" style="height:4px;"></div>
<div>
    <button class="btn btn-primary"
            @onclick="buttonEraseSignatureClick">
        Unterschrift löschen
    </button>
    <button @onclick="Close" class="btn btn-primary float-right">Ok</button>
</div>


@code {

    private bool signatureActivated = false;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }




    private async void Cancel()
    {
        await ModalInstance.Cancel();
    }
    private async void Close()
    {
        var image = await JsRuntime.InvokeAsync<object>("exampleJsFunctions.signatureToImage");
        await ModalInstance.Close(ModalResult.Ok(image));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!signatureActivated)
        {
            JsRuntime.InvokeAsync<object>("zkSignature.capture", true);
            signatureActivated = true;
        }
        base.OnAfterRender(firstRender);
    }

    private async void buttonEraseSignatureClick()
    {
        //await JsRuntime.InvokeAsync<object>("exampleJsFunctions.signatureToFullScreen");


        await JsRuntime.InvokeAsync<object>("zkSignature.clear");
        await JsRuntime.InvokeAsync<object>("zkSignature.capture", true);
    }
}